<pre class='metadata'>
Title: Web Lifecycle
Group: webperf
Shortname: web-lifecycle
Level: 1
ED: 
TR: 
Status: ED
Editor: Shubhie Panicker, Google https://google.com, panicker@google.com
Editor: Domenic Denicola, Google https://google.com, domenic@chromium.org
Repository: wicg/web-lifecycle
Abstract: This document defines an API that supports browsers' ability to manage lifecycle of web pages.
Default Highlight: js
</pre>

Introduction {#intro}
=====================
With large numbers of web apps (and tabs) running, critical resources such as memory, CPU, battery, network etc easily get oversubscribed, leading to a bad end user experience. Application lifecycle is a key way that modern OSs manage resources. 

For a platform to support application lifecycle, it needs to:
    * provide developers with signals about transitions between the lifecycle states
    * provide lifecycle-compatible APIs that allow key capabilities to work even when the app is backgrounded or stopped.

This proposal attempts to define what the lifecycle of a web page is and add needed extensions to enable web applications to respond to two important lifecycle events commonly performed by user agents:
    * Tab discarding (for memory saving)
    * CPU suspension (for battery, data, CPU saving)

Lifecycle States {#sec-lifecycle-states}
==============================

This spec defines what the lifecycle of a web page is and adds extensions to enable web applications to respond to two important lifecycle events commonly performed by user agents:
    * CPU suspension (for conserving battery, data, CPU)
    * Tab discarding (for memory saving)

This spec formalizes two new lifecycle states to support the above:
    * FROZEN: lifecycle state for CPU suspension. Normally HIDDEN pages will be FROZEN to conserve resources.
    * <dfn export>Discarded</dfn>: lifecycle state [=Discarded=] means that the [=discard=] algorithm was called on the Document's browsing context. Normally FROZEN frames will be moved to [=Discarded=] state to conserve resources. 

TODO(panicker): Insert diagram

API {#sec-api}
=======================================

Web Lifecycle involves the following additions:

<pre class="idl">
    partial interface Document {
        attribute EventHandler  onfreeze;
        attribute EventHandler  onresume;
        readonly attribute boolean wasDiscarded;
    };
</pre>

    NOTE: these are added on Document, instead of on Window, for consistency with the <a href="https://w3c.github.io/page-visibility/">page visibility API</a>; we expect these APIs to be used in tandem with that existing one.

    NOTE: In addition <a href="https://github.com/whatwg/html/issues/3378">clientId and discardedClientId</a> will be added to Window, to support restoring view state when user revisits a discarded page, causing a reload. We expect those to be used by code that reacts to these events.

Usage example {#example}
------------------------

Example of handling freeze and resume:
<pre class="example highlight">
    TODO(panicker): Add code sample here.

</pre>

Example of restoring view state after discard:
<pre class="example highlight">
    TODO(panicker): Add code sample here.

</pre>

Example to show how existing onvisibilitychange API works together with new Lifecycle APIs:
<pre class="example highlight">
    TODO(panicker): Add code sample here.

</pre>

Processing model {#sec-processing-model}
========================================

Modifications to HTML specifications {#mod}
--------------------------------------------

### HTML: <a href="https://html.spec.whatwg.org/#concept-task">task definition</a> ### {#html-task-dfn}

Each task gets an associated <dfn for="task">freezeable</dfn> (bool) field

### HTML: <a href="https://html.spec.whatwg.org/#task-source">task source</a> ### {#html-task-source-dfn}

Each task source is classified as <dfn for="task">freezeable</dfn> or <dfn for="task">unfreezeable</dfn>.

TODO(panicker): Add specific examples of task sources such as timers, loading.

TODO(domenic): classify all existing task sources in the HTML spec; find out if other specs have defined any relevant task sources.

### HTML: <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#unloading-documents">Unloading documents</a> and <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#history-traversal">History Traversal</a> ### {#html-bfcache-dfn}

When documents move into and out of bfcache they will transition through [=FROZEN=] & [=UNFROZEN=] state respectively.

* In <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#unload-a-document">unload a document</a> algorithm, before Step #5 if the persisted attribute is true (moving to bfcache) run the [[#change-frozenness-of-document]], passing in document and <code>FROZEN</code>.
* In the <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#history-traversal">History traversal</a> algorithm, after Step #4.6.4 if the persisted attribute is true (moving out of bfcache) run the [[#change-frozenness-of-document]], passing in document and <code>UNFROZEN</code>. 


### HTML: <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model">HTML Event Loop Processing Model</a>

Add to beginning of Step #8.1.4.2.1:

In the case of a a browsing context event loop if the Document of the task is in [=FROZEN=] state, then ignore freezeable tasks associated with such a Document.

### HTML: <a href="https://html.spec.whatwg.org/multipage/window-object.html#a-browsing-context-is-discarded">Discarding browsing context</a>

Rename <a href="https://html.spec.whatwg.org/multipage/window-object.html#a-browsing-context-is-discarded">”Discarded” in HTML spec</a>  to "Destroyed".

### HTML: Modifications to <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#initialise-the-document-object">Initialize the document</a>

Before Step #3 add following:

If the browsing context was previously [=Discarded=] then set the {{Document}}'s [=Document/discarded=] boolean to true.


Additions to Web Lifecycle spec
--------------------------------------------

<h4 dfn>FROZENNESS state</h4>
A document can be in one of the following FROZENNESS states:

* <dfn export>FROZEN</dfn>: the document is frozen, any freezeable tasks associated with the document will not run
* <dfn export>UNFROZEN</dfn>: the document is not frozen, tasks associated with the document will run as usual

    NOTE: Per the [[#change-frozenness-of-a-top-level-document]] algorithm, when the Document of the top level browsing context changes its FROZENNESS state then all documents of descendant browsing contexts will also change FROZENNESS to the same value (and be consistent with the Document of the top level browsing context).

The UA may choose to execute [[#change-frozenness-of-a-top-level-document]] with <code>FROZEN</code> in certain situations.
For instance, if a browsing context is in the background or hidden, and a grace period has elapsed the UA could execute [[#change-frozenness-of-a-top-level-document]] with <code>FROZEN</code> to conserve resources and maintain the quality of the (foreground) user experience. 
Specific example:

* In mobile Chrome, tabs that have been in background for (at least) 5 minutes, may be [=FROZEN=], to conserve battery and data.

    NOTE: background tabs that are actively doing work on behalf of the user (eg. playing audio) are generally not [=FROZEN=].

The UA will typically execute [[#change-frozenness-of-a-top-level-document]] with <code>UNFROZEN</code> when the user revisits that browsing context. In addition, the UA may choose to periodically execute [[#change-frozenness-of-a-top-level-document]] with <code>UNFROZEN</code> in the background, if plentiful resources are available.

<h4 dfn>Reacting to FROZENNESS state changes</h4>
<h5 dfn>Change frozenness of a top-level document</h5>
To change the frozenness of a top-level document passing in a document |doc| and FROZENNESS state |x| (one of <code>frozen</code>, <code>unfrozen</code>):

* Assert: |doc|'s browsing context is a top-level browsing context.
* Execute [[#change-frozenness-of-document]] passing in |doc| and |x|.
* Let descendants be the <a href="https://html.spec.whatwg.org/#list-of-the-descendant-browsing-contexts">list of the descendant browsing contexts of document</a>.
* For each browsing context |b| in descendants:
    * Let |d| be the active document of |b|.
    * Execute [[#change-frozenness-of-document]] passing arguments |d| and |x|.

<h5 dfn>Change frozenness of document</h5>
To change the frozenness of a document given a document |doc| and FROZENNESS state |x|:
* If |x| is <code>FROZEN</code>:
    * Set |doc|'s FROZENNESS state to <code>FROZEN</code>.
    * Fire an event named freeze at |doc|.
* Otherwise:
    * Fire an event named resume at |doc|.
    * Set |doc|'s FROZENNESS state to <code>UNFROZEN</code>.

    NOTE: it is intentional that the ordering between event-firing and setting the state are different in the two cases above.

<h4 dfn>Discarded state</h4>
To <dfn export>discard</dfn> a browsing context, <a href="https://html.spec.whatwg.org/multipage/window-object.html#a-browsing-context-is-discarded">destroy the browsing context</a>, and make note of the fact that the reason it was destroyed was because of discarding. Consequently all descendant browsing contexts are discarded as well. Document objects for all the entries in the browsing context's session history are destroyed.

    NOTE: Discard is typically done to reclaim system memory, when memory and other resources are running low. On the other hand destroying a browser context is the normal teardown due to user leaving the page etc. 

Browsing contexts -- that are in the background and have their documents in <a href="https://www.w3.org/TR/page-visibility-2/#visibility-states-and-the-visibilitystate-enum">VisibilityState hidden</a> -- can be [=Discarded=], under resource pressure (eg. low memory). Specific example:

* In desktop Chrome, background tabs that are not important to the user (not used in some time) may be [=DISCARDED=], to conserve memory

    NOTE: background tabs that are actively doing work on behalf of the user (eg. playing audio) are generally not [=DISCARDED=].

When a top level browsing context (tab in the browser) is [=Discarded=] due to resource pressure (or unexpected events eg. process crash), and later the user revisits the tab in the browser, then the {{Document}}'s [=Document/discarded=] boolean will be true.

TODO(panicker): Move the below text?

Each Document has a <dfn for="Document">discarded</dfn> boolean, which is initially false.
The <dfn attribute for="Document">wasDiscarded</dfn> attribute's getter must return the value of this {{Document}}'s [=Document/discarded=] boolean.


<!-- ============================================================ -->
<h2 id=acknowledgements>Acknowledgements</h2>
<!-- ============================================================ -->

Special thanks to Ojan Vafai, Philip Walton, Olli Petay, Todd Reifsteck for their technical input and suggestions that led to improvements to this specification.
